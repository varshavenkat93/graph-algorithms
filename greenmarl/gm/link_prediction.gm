procedure calculate_score(G:graph) : int
{
foreach(i : G.nodes){
	nodeSet(G) n1;
	foreach(m:i.nbrs){
			n1.add(m);
		}
		
	foreach(j : G.nodes){
		
		nodeSet(G) common;
		nodeSet(G) union;
		foreach(m:j.nbrs){
			if (n1.has(m)) {
				common.add(m);
				
				
			}
			union.add(m);
		}
		union.addAll(n1);
		int ki = n1.size();
		int kj = j.numNbrs();
		int common_size = common.size();
		int union_size = union.size();
		int min_k;
		int max_k;
		if (ki<kj){
			min_k = ki;
			max_k = kj;
		}
		else{
			min_k = kj;
			max_k = ki;
		}
		double score_adamic;
		score_adamic = sum( z : common.items ) { 1/log(z.numNbrs())};
		
		/**
		score(i,j) = common_size;
		score(i,j) = common_size/sqrt(ki*kj);
		score(i,j) = common_size/union_size;
		score(i,j) = 2*common_size/ki+kj;
		score(i,j) = common_size/min_k;
		score(i,j) = common_size/max_k;
		score(i,j) = common_size/ki*kj;
		score(i,j) = ki*kj;
		
		
		*/
		
		
}
}
return 0;	
}
